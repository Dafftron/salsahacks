var __async=(e,t,r)=>new Promise((s,a)=>{var o=e=>{try{E(r.next(e))}catch(t){a(t)}},n=e=>{try{E(r.throw(e))}catch(t){a(t)}},E=e=>e.done?s(e.value):Promise.resolve(e.value).then(o,n);E((r=r.apply(e,t)).next())});!function(){"use strict";const e="https://unpkg.com/@ffmpeg/core@0.12.9/dist/umd/ffmpeg-core.js";var t,r;(r=t||(t={})).LOAD="LOAD",r.EXEC="EXEC",r.FFPROBE="FFPROBE",r.WRITE_FILE="WRITE_FILE",r.READ_FILE="READ_FILE",r.DELETE_FILE="DELETE_FILE",r.RENAME="RENAME",r.CREATE_DIR="CREATE_DIR",r.LIST_DIR="LIST_DIR",r.DELETE_DIR="DELETE_DIR",r.ERROR="ERROR",r.DOWNLOAD="DOWNLOAD",r.PROGRESS="PROGRESS",r.LOG="LOG",r.MOUNT="MOUNT",r.UNMOUNT="UNMOUNT";const s=new Error("unknown message type"),a=new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first"),o=new Error("failed to import ffmpeg-core.js");let n;const E=r=>__async(this,[r],function*({coreURL:r,wasmURL:s,workerURL:a}){const E=!n;try{r||(r=e),importScripts(r)}catch(p){if(r&&r!==e||(r=e.replace("/umd/","/esm/")),self.createFFmpegCore=(yield import(r)).default,!self.createFFmpegCore)throw o}const c=r,i=s||r.replace(/.js$/g,".wasm"),R=a||r.replace(/.js$/g,".worker.js");return n=yield self.createFFmpegCore({mainScriptUrlOrBlob:`${c}#${btoa(JSON.stringify({wasmURL:i,workerURL:R}))}`}),n.setLogger(e=>self.postMessage({type:t.LOG,data:e})),n.setProgress(e=>self.postMessage({type:t.PROGRESS,data:e})),E});self.onmessage=e=>__async(this,[e],function*({data:{id:e,type:r,data:o}}){const c=[];let i;try{if(r!==t.LOAD&&!n)throw a;switch(r){case t.LOAD:i=yield E(o);break;case t.EXEC:i=(({args:e,timeout:t=-1})=>{n.setTimeout(t),n.exec(...e);const r=n.ret;return n.reset(),r})(o);break;case t.FFPROBE:i=(({args:e,timeout:t=-1})=>{n.setTimeout(t),n.ffprobe(...e);const r=n.ret;return n.reset(),r})(o);break;case t.WRITE_FILE:i=(({path:e,data:t})=>(n.FS.writeFile(e,t),!0))(o);break;case t.READ_FILE:i=(({path:e,encoding:t})=>n.FS.readFile(e,{encoding:t}))(o);break;case t.DELETE_FILE:i=(({path:e})=>(n.FS.unlink(e),!0))(o);break;case t.RENAME:i=(({oldPath:e,newPath:t})=>(n.FS.rename(e,t),!0))(o);break;case t.CREATE_DIR:i=(({path:e})=>(n.FS.mkdir(e),!0))(o);break;case t.LIST_DIR:i=(({path:e})=>{const t=n.FS.readdir(e),r=[];for(const s of t){const t=n.FS.stat(`${e}/${s}`),a=n.FS.isDir(t.mode);r.push({name:s,isDir:a})}return r})(o);break;case t.DELETE_DIR:i=(({path:e})=>(n.FS.rmdir(e),!0))(o);break;case t.MOUNT:i=(({fsType:e,options:t,mountPoint:r})=>{const s=e,a=n.FS.filesystems[s];return!!a&&(n.FS.mount(a,t,r),!0)})(o);break;case t.UNMOUNT:i=(({mountPoint:e})=>(n.FS.unmount(e),!0))(o);break;default:throw s}}catch(R){return void self.postMessage({id:e,type:t.ERROR,data:R.toString()})}i instanceof Uint8Array&&c.push(i.buffer),self.postMessage({id:e,type:r,data:i},c)})}();
